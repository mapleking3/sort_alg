
所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。
目录
  简介
  分类
  排列算法列表稳定的
    不稳定
    不实用的排序算法
  排序的算法插入排序
    冒泡排序
    选择排序
    快速排序
    堆排序
    各算法的时间复杂度
  排序算法源代码及复杂度分析一、简单排序算法
    1.冒泡法：
    2.交换法：
    3.选择法：
    4.插入法：
    二、高级排序算法
    三、其他排序
    1.双向冒泡：
    2.SHELL排序
    四、基于模板的通用排序
  简介 
  分类 
  排列算法列表 稳定的 
    不稳定 
    不实用的排序算法
  排序的算法 插入排序 
    冒泡排序 
    选择排序 
    快速排序 
    堆排序 
    各算法的时间复杂度
  排序算法源代码及复杂度分析 一、简单排序算法 
    1.冒泡法： 
    2.交换法： 
    3.选择法： 
    4.插入法： 
    二、高级排序算法 
    三、其他排序 
    1.双向冒泡： 
    2.SHELL排序 
    四、基于模板的通用排序
  展开 编辑本段简介

编辑本段分类
　　在计算机科学所使用的排序算法通常被分类为： 　　计算的复杂度（最差、平均、和最好表现），依据串列（list）的大小（n）。一般而言，好的表现是O(n log 
n)，且坏的行为是Ω(n2)。对于一个排序理想的表现是O(n)。仅使用一个抽象关键比较运算的排序算法总平均上总是至少需要Ω(n log n)。 
　　记忆体使用量（以及其他电脑资源的使用） 
　　稳定度：稳定排序算法会依照相等的关键（换言之就是值）维持纪录的相对次序。也就是一个排序算法是稳定的，就是当有两个有相等关键的纪录R和S，且在原本的串列中R出现在S之前，在排序过的串列中R也将会是在S之前。 
　　一般的方法：插入、交换、选择、合并等等。交换排序包含冒泡排序（bubble 
sort）和快速排序（quicksort）。选择排序包含shaker排序和堆排序（heapsort）。 
　　当相等的元素是无法分辨的，比如像是整数，稳定度并不是一个问题。然而，假设以下的数对将要以他们的第一个数字来排序。 　　(4, 1) (3, 1) (3, 
7) (5, 6) 　　在这个状况下，有可能产生两种不同的结果，一个是依照相等的键值维持相对的次序，而另外一个则没有： 　　(3, 1) (3, 7) (4, 
1) (5, 6) (维持次序) 　　(3, 7) (3, 1) (4, 1) (5, 6) (次序被改变) 
　　不稳定排序算法可能会在相等的键值中改变纪录的相对次序，但是稳定排序算法从来不会如此。不稳定排序算法可以被特别地时作为稳定。作这件事情的一个方式是人工扩充键值的比较，如此在其他方面相同键值的两个物件间之比较，就会被决定使用在原先资料次序中的条目，当作一个同分决赛。然而，要记住这种次序通常牵涉到额外的空间负担。
编辑本段排列算法列表
　　在这个表格中，n是要被排序的纪录数量以及k是不同键值的数量。
稳定的
　　冒泡排序（bubble sort） ― O(n2) 　　鸡尾酒排序 (Cocktail sort, 双向的冒泡排序) ― O(n2) 　　插入排序 
（insertion sort）― O(n2) 　　桶排序 （bucket sort）― O(n); 需要 O(k) 额外 记忆体 　　计数排序 
(counting sort) ― O(n+k); 需要 O(n+k) 额外 记忆体 　　归并排序 （merge sort）― O(n log n); 需要 
O(n) 额外记忆体 　　原地归并排序 ― O(n2) 　　二叉树排序 （Binary tree sort） ― O(n log n); 需要 O(n) 
额外记忆体 　　鸽巢排序 (Pigeonhole sort) ― O(n+k); 需要 O(k) 额外记忆体 　　基数排序 （radix sort）― 
O(n・k); 需要 O(n) 额外记忆体 　　Gnome sort ― O(n2) 　　Library sort ― O(n log n) with high 
probability, 需要 (1+ε)n 额外记忆体
不稳定
　　选择排序 （selection sort）― O(n2) 　　希尔排序 （shell sort）― O(n log n) 如果使用最佳的现在版本 
　　Comb sort ― O(n log n) 　　堆排序 （heapsort）― O(n log n) 　　Smoothsort ― O(n log n) 
　　快速排序 （quicksort）― O(n log n) 期望时间, O(n2) 最坏情况; 对於大的、乱数串列一般相信是最快的已知排序 
　　Introsort ― O(n log n) 　　Patience sorting ― O(n log n + k) 最外情况时间, 需要 额外的 O(n 
+ k) 空间, 也需要找到最长的递增子序列（longest increasing subsequence）
不实用的排序算法
　　Bogo排序 ― O(n × n!) 期望时间, 无穷的最坏情况。 　　Stupid sort ― O(n3); 递回版本需要 O(n2) 额外记忆体 
　　Bead sort ― O(n) or O(√n), 但需要特别的硬件 　　Pancake sorting ― O(n), 但需要特别的硬件
编辑本段排序的算法
　　排序的算法有很多，对空间的要求及其时间效率也不尽相同。下面列出了一些常见的排序算法。这里面插入排序和冒泡排序又被称作简单排序，他们对空间的要求不高，但是时间效率却不稳定；而后面三种排序相对于简单排序对空间的要求稍高一点，但时间效率却能稳定在很高的水平。基数排序是针对关键字在一个较小范围内的排序算法。 
　　插入排序 　　冒泡排序 　　选择排序 　　快速排序 　　堆排序 　　归并排序 　　基数排序 　　希尔排序
插入排序
　　插入排序是这样实现的： 　　首先新建一个空列表，用于保存已排序的有序数列（我们称之为"有序列表"）。 
　　从原数列中取出一个数，将其插入"有序列表"中，使其仍旧保持有序状态。 　　重复2号步骤，直至原数列为空。 
　　插入排序的平均时间复杂度为平方级的，效率不高，但是容易实现。它借助了"逐步扩大成果"的思想，使有序列表的长度逐渐增加，直至其长度等于原列表的长度。
冒泡排序
　　冒泡排序是这样实现的： 　　首先将所有待排序的数字放入工作列表中。 
　　从列表的第一个数字到倒数第二个数字，逐个检查：若某一位上的数字大于他的下一位，则将它与它的下一位交换。 　　重复2号步骤，直至再也不能交换。 
　　冒泡排序的平均时间复杂度与插入排序相同，也是平方级的，但也是非常容易实现的算法。
选择排序
　　选择排序是这样实现的： 　　设数组内存放了n个待排数字，数组下标从1开始，到n结束。 　　i=1 　　从数组的第i个元素开始到第n个元素，寻找最小的元素。 
　　将上一步找到的最小元素和第i位元素交换。 　　如果i=n－1算法结束，否则回到第3步 　　选择排序的平均时间复杂度也是O(n&sup2;)的。 　　举例： 
　　564 　　比如说这个，我想让它从小到大排序，怎么做呢？ 　　第一步：从第一位开始找最小的元素，654中4最小，与第一位交换。结果为465 
　　第二步：从第二位开始找最小的元素，65中5最小，与第二位交换。结果为456 　　第三步：i=2，n=3，此时i=n-1，算法结束 　　完成
快速排序
　　现在开始，我们要接触高效排序算法了。实践证明，快速排序是所有排序算法中最高效的一种。它采用了分治的思想：先保证列表的前半部分都小于后半部分，然后分别对前半部分和后半部分排序，这样整个列表就有序了。这是一种先进的思想，也是它高效的原因。因为在排序算法中，算法的高效与否与列表中数字间的比较次数有直接的关系，而"保证列表的前半部分都小于后半部分"就使得前半部分的任何一个数从此以后都不再跟后半部分的数进行比较了，大大减少了数字间不必要的比较。但查找数据得另当别论了。
堆排序
　　堆排序与前面的算法都不同，它是这样的： 　　首先新建一个空列表，作用与插入排序中的"有序列表"相同。 
　　找到数列中最大的数字，将其加在"有序列表"的末尾，并将其从原数列中删除。 　　重复2号步骤，直至原数列为空。 
　　堆排序的平均时间复杂度为nlogn,效率高（因为有堆这种数据结构以及它奇妙的特征，使得"找到数列中最大的数字"这样的操作只需要O(1)的时间复杂度，维护需要logn的时间复杂度），但是实现相对复杂（可以说是这里7种算法中比较难实现的）。 
　　看起来似乎堆排序与插入排序有些相像，但他们其实是本质不同的算法。至少，他们的时间复杂度差了一个数量级，一个是平方级的，一个是对数级的。
各算法的时间复杂度
　　平均时间复杂度 　　插入排序 O(n2) 　　冒泡排序 O(n2) 　　选择排序 O(n2) 　　快速排序 O(n log n) 　　堆排序 O(n log 
n) 　　归并排序 O(n log n) 　　基数排序 O(n) 　　希尔排序 O(n1.25)
编辑本段排序算法源代码及复杂度分析
一、简单排序算法
　　由于程序比较简单，所以没有加什么注释。所有的程序都给出了完整的运行代码，并在我的VC环境 
　　下运行通过。因为没有涉及MFC和WINDOWS的内容，所以在BORLAND C++的平台上应该也不会有什么 
　　问题的。在代码的后面给出了运行过程示意，希望对理解有帮助。
1.冒泡法：
　　这是最原始，也是众所周知的最慢的算法了。他的名字的由来因为它的工作看来象是冒泡： 　　#include ＜iostream.h＞ 　　void 
BubbleSort(int * pData，int Count) 　　{ 　　int iTemp; 　　for(int i＝1;i＜Count;i++) 
　　{ //一共进行（count-1）轮，每次得到一个最小值 　　for(int j＝Count-1;j＞＝i;j--) //每次从最后往前交换，得到最小值 
　　{ 　　if(pData[j]＜pData[j-1]) 　　{ 　　iTemp ＝ pData[j-1]; 　　pData[j-1] ＝ pData[j]; 
　　pData[j] ＝ iTemp; 　　} 　　} 　　} 　　} 　　void main() 　　{ 　　int data[] ＝ 
{10，9，8，7，6，5，4}; 　　BubbleSort(data，7); 　　for (int i＝0;i＜7;i++) 　　cout＜＜data＜＜＂ 
＂; 　　cout＜＜＂＼n＂; 　　} 　　倒序(最糟情况) 
　　第一轮：10，9，8，7-＞10，9，7，8-＞10，7，9，8-＞7，10，9，8(交换3次) 
　　第二轮：7，10，9，8-＞7，10，8，9-＞7，8，10，9(交换2次) 　　第一轮：7，8，10，9-＞7，8，9，10(交换1次) 
　　循环次数：6次 　　交换次数：6次 　　其他： 　　第一轮：8，10，7，9-＞8，10，7，9-＞8，7，10，9-＞7，8，10，9(交换2次) 
　　第二轮：7，8，10，9-＞7，8，10，9-＞7，8，10，9(交换0次) 　　第一轮：7，8，10，9-＞7，8，9，10(交换1次) 
　　循环次数：6次 　　交换次数：3次 　　上面我们给出了程序段，现在我们分析它：这里，影响我们算法性能的主要部分是循环和交换， 
　　显然，次数越多，性能就越差。从上面的程序我们可以看出循环的次数是固定的，为1+2+...+n-1。 　　写成公式就是1/2＊(n-1)＊n。 
　　现在注意，我们给出O方法的定义： 　　若存在一常量K和起点n0，使当n＞＝n0时，有f(n)＜＝K＊g(n)，则f(n) ＝ 
O(g(n))。（呵呵，不要说没 　　学好数学呀，对于编程数学是非常重要的！！！） 
　　现在我们来看1/2＊(n-1)＊n，当K＝1/2，n0＝1，g(n)＝n＊n时，1/2＊(n-1)＊n＜＝1/2＊n＊n＝K＊g(n)。所以f(n) 
　　＝O(g(n))＝O(n＊n)。所以我们程序循环的复杂度为O(n＊n)。 
　　再看交换。从程序后面所跟的表可以看到，两种情况的循环相同，交换不同。其实交换本身同数据源的 
　　有序程度有极大的关系，当数据处于倒序的情况时，交换次数同循环一样（每次循环判断都会交换）， 
　　复杂度为O(n＊n)。当数据为正序，将不会有交换。复杂度为O(0)。乱序时处于中间状态。正是由于这样的 　　原因，我们通常都是通过循环次数来对比算法。
2.交换法：
　　交换法的程序最清晰简单，每次用当前的元素一一的同其后的元素比较并交换。 　　#include ＜iostream.h＞ 　　void 
ExchangeSort(int＊ pData，int Count) 　　{ 　　int iTemp; 　　for(int i＝0;i＜Count-1;i++) 
　　{ //共（count-1)轮，每轮得到一个最小值 　　for(int j＝i+1;j＜Count;j++) 　　{ 
//每次从剩下的数字中寻找最小值，于当前最小值相比，如果小则交换 　　if(pData[j]＜pData[i]) 　　{ 　　iTemp ＝ pData[i]; 
　　pData[i] ＝ pData[j]; 　　pData[j] ＝ iTemp; 　　} 　　} 　　} 　　} 　　void main() 　　{ 
　　int data[] ＝ {10，9，8，7，6，5，4}; 　　ExchangeSort(data，7); 　　for (int i＝0;i＜7;i++) 
　　cout＜＜data＜＜＂ ＂; 　　cout＜＜＂＼n＂; 　　} 　　倒序(最糟情况) 
　　第一轮：10，9，8，7-＞9，10，8，7-＞8，10，9，7-＞7，10，9，8(交换3次) 
　　第二轮：7，10，9，8-＞7，9，10，8-＞7，8，10，9(交换2次) 　　第一轮：7，8，10，9-＞7，8，9，10(交换1次) 
　　循环次数：6次 　　交换次数：6次 　　其他： 　　第一轮：8，10，7，9-＞8，10，7，9-＞7，10，8，9-＞7，10，8，9(交换1次) 
　　第二轮：7，10，8，9-＞7，8，10，9-＞7，8，10，9(交换1次) 　　第一轮：7，8，10，9-＞7，8，9，10(交换1次) 
　　循环次数：6次 　　交换次数：3次 　　从运行的表格来看，交换几乎和冒泡一样糟。事实确实如此。循环次数和冒泡一样 
　　也是1/2＊(n-1)＊n，所以算法的复杂度仍然是O(n＊n)。由于我们无法给出所有的情况，所以 
　　只能直接告诉大家他们在交换上面也是一样的糟糕（在某些情况下稍好，在某些情况下稍差）。
3.选择法：
　　现在我们终于可以看到一点希望：选择法，这种方法提高了一点性能（某些情况下） 
　　这种方法类似我们人为的排序习惯：从数据中选择最小的同第一个值交换，在从省下的部分中 　　选择最小的与第二个交换，这样往复下去。 　　#include 
＜iostream.h＞ 　　void SelectSort(int＊ pData，int Count) 　　{ 　　int iTemp; 　　int 
iPos; 　　for(int i＝0;i＜Count-1;i++) 　　{ 　　iTemp ＝ pData; 　　iPos ＝ i; 　　for(int 
j＝i+1;j＜Count;j++) 　　{ 　　if(pData[j]＜iTemp) 　　{ 　　iTemp ＝ pData[j]; 　　iPos ＝ j; 
　　} 　　} 　　pData[iPos] ＝ pData; 　　pData ＝ iTemp; 　　} 　　} 　　void main() 　　{ 　　int 
data[] ＝ {10，9，8，7，6，5，4}; 　　SelectSort(data，7); 　　for (int i＝0;i＜7;i++) 
　　cout＜＜data＜＜＂ ＂; 　　cout＜＜＂＼n＂; 　　} 　　倒序(最糟情况) 
　　第一轮：10，9，8，7-＞(iTemp＝9)10，9，8，7-＞(iTemp＝8)10，9，8，7-＞(iTemp＝7)7，9，8，10(交换1次) 
　　第二轮：7，9，8，10-＞7，9，8，10(iTemp＝8)-＞(iTemp＝8)7，8，9，10(交换1次) 
　　第一轮：7，8，9，10-＞(iTemp＝9)7，8，9，10(交换0次) 　　循环次数：6次 　　交换次数：2次 　　其他： 
　　第一轮：8，10，7，9-＞(iTemp＝8)8，10，7，9-＞(iTemp＝7)8，10，7，9-＞(iTemp＝7)7，10，8，9(交换1次) 
　　第二轮：7，10，8，9-＞(iTemp＝8)7，10，8，9-＞(iTemp＝8)7，8，10，9(交换1次) 
　　第一轮：7，8，10，9-＞(iTemp＝9)7，8，9，10(交换1次) 　　循环次数：6次 　　交换次数：3次 
　　遗憾的是算法需要的循环次数依然是1/2＊(n-1)＊n。所以算法复杂度为O(n＊n)。 
　　我们来看他的交换。由于每次外层循环只产生一次交换（只有一个最小值）。所以f(n)＜＝n 
　　所以我们有f(n)＝O(n)。所以，在数据较乱的时候，可以减少一定的交换次数。
4.插入法：
　　插入法较为复杂，它的基本工作原理是抽出牌，在前面的牌中寻找相应的位置插入，然后继续下一张 　　#include ＜iostream.h＞ 　　void 
InsertSort(int＊ pData，int Count) 　　{ 　　int iTemp; 　　int iPos; 　　for(int 
i＝1;i＜Count;i++) 　　{ 　　iTemp ＝ pData[i]; //保存要插入的数 　　iPos ＝ i-1; //被插入的数组数字个数 
　　while((iPos＞＝0) && (iTemp＜pData[iPos])) 　　{ //从最后一个（最大数字）开始对比，大于它的数字往后移位 
　　pData[iPos+1] ＝ pData[iPos]; 　　iPos--; 　　} 　　pData[iPos+1] ＝ iTemp; //插入数字的位置 
　　} 　　} 　　void main() 　　{ 　　int data[] ＝ {10，9，8，7，6，5，4}; 　　InsertSort(data，7); 
　　for (int i＝0;i＜7;i++) 　　cout＜＜data＜＜＂ ＂; 　　cout＜＜＂＼n＂; 　　} 　　倒序(最糟情况) 
　　第一轮：10，9，8，7-＞9，10，8，7(交换1次)(循环1次) 　　第二轮：9，10，8，7-＞8，9，10，7(交换1次)(循环2次) 
　　第一轮：8，9，10，7-＞7，8，9，10(交换1次)(循环3次) 　　循环次数：6次 　　交换次数：3次 　　其他： 
　　第一轮：8，10，7，9-＞8，10，7，9(交换0次)(循环1次) 　　第二轮：8，10，7，9-＞7，8，10，9(交换1次)(循环2次) 
　　第一轮：7，8，10，9-＞7，8，9，10(交换1次)(循环1次) 　　循环次数：4次 　　交换次数：2次 
　　上面结尾的行为分析事实上造成了一种假象，让我们认为这种算法是简单算法中最好的，其实不是， 
　　因为其循环次数虽然并不固定，我们仍可以使用O方法。从上面的结果可以看出，循环的次数f(n)＜＝ 
　　1/2＊n＊(n-1)＜＝1/2＊n＊n。所以其复杂度仍为O(n＊n)（这里说明一下，其实如果不是为了展示这些简单 
　　排序的不同，交换次数仍然可以这样推导）。现在看交换，从外观上看，交换次数是O(n)（推导类似 
　　选择法），但我们每次要进行与内层循环相同次数的‘＝’操作。正常的一次交换我们需要三次‘＝’ 　　而这里显然多了一些，所以我们浪费了时间。 
　　最终，我个人认为，在简单排序算法中，选择法是最好的。
二、高级排序算法
　　高级排序算法中我们将只介绍这一种，同时也是目前我所知道（我看过的资料中）的最快的。 
　　它的工作看起来仍然象一个二叉树。首先我们选择一个中间值middle程序中我们使用数组中间值，然后 
　　把比它小的放在左边，大的放在右边（具体的实现是从两边找，找到一对后交换）。然后对两边分别使 　　用这个过程（最容易的方法――递归）。 　　1.快速排序： 
　　#include ＜iostream.h＞ 　　void run(int＊ pData，int left，int right) 　　{ 　　int i，j; 
　　int middle，iTemp; 　　i ＝ left; 　　j ＝ right; 　　middle ＝ pData[left]; 　　do{ 
　　while((pData[i]＜middle) && (i＜right))//从左扫描大于中值的数 　　i++;　 
　　while((pData[j]＞middle) && (j＞left))//从右扫描大于中值的数 　　j--; 　　if(i＜＝j)//找到了一对值 　　{ 
　　//交换 　　iTemp ＝ pData[i]; 　　pData[i] ＝ pData[j]; 　　pData[j] ＝ iTemp; 　　i++; 
　　j--; 　　} 　　}while(i＜＝j);//如果两边扫描的下标交错，就停止（完成一次） 　　//当左边部分有值(left＜j)，递归左半边 
　　if(left＜j) 　　run(pData，left，j); 　　//当右边部分有值(right＞i)，递归右半边 　　if(right＞i) 
　　run(pData，i，right); 　　} 　　void QuickSort(int＊ pData，int Count) 　　{ 
　　run(pData，0，Count-1); 　　} 　　void main() 　　{ 　　int data[] ＝ {10，9，8，7，6，5，4}; 
　　QuickSort(data，7); 　　for (int i＝0;i＜7;i++) 　　cout＜＜data＜＜＂ ＂; 　　cout＜＜＂＼n＂; 
　　} 　　这里我没有给出行为的分析，因为这个很简单，我们直接来分析算法：首先我们考虑最理想的情况 
　　1.数组的大小是2的幂，这样分下去始终可以被2整除。假设为2的k次方，即k＝log2(n)。 　　2.每次我们选择的值刚好是中间值，这样，数组才可以被等分。 
　　第一层递归，循环n次，第二层循环2＊(n/2)...... 　　所以共有n+2(n/2)+4(n/4)+...+n＊(n/n) ＝ 
n+n+n+...+n＝k＊n＝log2(n)＊n 　　所以算法复杂度为O(log2(n)＊n) 
　　其他的情况只会比这种情况差，最差的情况是每次选择到的middle都是最小值或最大值，那么他将变 
　　成交换法（由于使用了递归，情况更糟）。但是你认为这种情况发生的几率有多大？？呵呵，你完全 　　不必担心这个问题。实践证明，大多数的情况，快速排序总是最好的。 
　　如果你担心这个问题，你可以使用堆排序，这是一种稳定的O(log2(n)＊n)算法，但是通常情况下速度要慢 　　于快速排序（因为要重组堆）。
三、其他排序
1.双向冒泡：
　　通常的冒泡是单向的，而这里是双向的，也就是说还要进行反向的工作。 　　代码看起来复杂，仔细理一下就明白了，是一个来回震荡的方式。 
　　写这段代码的作者认为这样可以在冒泡的基础上减少一些交换（我不这么认为，也许我错了）。 　　反正我认为这是一段有趣的代码，值得一看。 　　#include 
＜iostream.h＞ 　　void Bubble2Sort(int＊ pData，int Count) 　　{ 　　int iTemp; 　　int 
left ＝ 1; 　　int right ＝Count -1; 　　int t; 　　do 　　{ 　　//正向的部分 　　for(int 
i＝right;i＞＝left;i--) 　　{ 　　if(pData＜pData[i-1]) 　　{ 　　iTemp ＝ pData; 　　pData ＝ 
pData[i-1]; 　　pData[i-1] ＝ iTemp; 　　t ＝ i; 　　} 　　} 　　left ＝ t+1; 　　//反向的部分 
　　for(i＝left;i＜right+1;i++) 　　{ 　　if(pData＜pData[i-1]) 　　{ 　　iTemp ＝ pData; 
　　pData ＝ pData[i-1]; 　　pData[i-1] ＝ iTemp; 　　t ＝ i; 　　} 　　} 　　right ＝ t-1; 
　　}while(left＜＝right); 　　} 　　void main() 　　{ 　　int data[] ＝ {10，9，8，7，6，5，4}; 
　　Bubble2Sort(data，7); 　　for (int i＝0;i＜7;i++) 　　cout＜＜data＜＜＂ ＂; 　　cout＜＜＂＼n＂; 
　　}
2.SHELL排序
　　这个排序非常复杂，看了程序就知道了。 　　首先需要一个递减的步长，这里我们使用的是9、5、3、1（最后的步长必须是1）。 
　　工作原理是首先对相隔9-1个元素的所有内容排序，然后再使用同样的方法对相隔5-1个元素的排序 　　以次类推。 　　#include ＜iostream.h＞ 
　　void ShellSort(int＊ pData，int Count) 　　{ 　　int step[4]; 　　step[0] ＝ 9; 
　　step[1] ＝ 5; 　　step[2] ＝ 3; 　　step[3] ＝ 1; 　　int iTemp; 　　int k，s，w; 　　for(int 
i＝0;i＜4;i++) 　　{ 　　k ＝ step; 　　s ＝ -k; 　　for(int j＝k;j＜Count;j++) 　　{ 　　iTemp ＝ 
pData[j]; 　　w ＝ j-k;//求上step个元素的下标 　　if(s ＝＝0) 　　{ 　　s ＝ -k; 　　s++; 　　pData[s] ＝ 
iTemp; 　　} 　　while((iTemp＜pData[w]) && (w＞＝0) && (w＜＝Count)) 　　{ 　　pData[w+k] ＝ 
pData[w]; 　　w ＝ w-k; 　　} 　　pData[w+k] ＝ iTemp; 　　} 　　} 　　} 　　void main() 　　{ 
　　int data[] ＝ {10，9，8，7，6，5，4，3，2，1，-10，-1}; 　　ShellSort(data，12); 　　for (int 
i＝0;i＜12;i++) 　　cout＜＜data＜＜＂ ＂; 　　cout＜＜＂＼n＂; 　　} 
　　呵呵，程序看起来有些头疼。不过也不是很难，把s＝＝0的块去掉就轻松多了，这里是避免使用0 　　步长造成程序异常而写的代码。这个代码我认为很值得一看。 
　　这个算法的得名是因为其发明者的名字D.L.SHELL。依照参考资料上的说法：“由于复杂的数学原因 
　　避免使用2的幂次步长，它能降低算法效率。”另外算法的复杂度为n的1.2次幂。同样因为非常复杂并 
　　“超出本书讨论范围”的原因（我也不知道过程），我们只有结果了。
四、基于模板的通用排序
　　这个程序我想就没有分析的必要了，大家看一下就可以了。不明白可以在论坛上问。 　　MyData.h文件 
　　/////////////////////////////////////////////////////// 　　class CMyData 　　{ 
　　public: 　　CMyData(int Index，char＊ strData); 　　CMyData(); 　　virtual ~CMyData(); 
　　int m_iIndex; 　　int GetDataSize(){ return m_iDataSize; }; 　　const char＊ 
GetData(){ return m_strDatamember; }; 　　//这里重载了操作符： 　　CMyData& operator 
＝(CMyData &SrcData); 　　bool operator ＜(CMyData& data ); 　　bool operator 
＞(CMyData& data ); 　　private: 　　char＊ m_strDatamember; 　　int m_iDataSize; 　　}; 
　　//////////////////////////////////////////////////////// 　　MyData.cpp文件 
　　//////////////////////////////////////////////////////// 　　CMyData::CMyData(): 
　　m_iIndex(0)， 　　m_iDataSize(0)， 　　m_strDatamember(NULL) 　　{ 　　} 
　　CMyData::~CMyData() 　　{ 　　if(m_strDatamember !＝ NULL) 　　delete[] 
m_strDatamember; 　　m_strDatamember ＝ NULL; 　　} 　　CMyData::CMyData(int 
Index，char＊ strData): 　　m_iIndex(Index)， 　　m_iDataSize(0)， 
　　m_strDatamember(NULL) 　　{ 　　m_iDataSize ＝ strlen(strData); 　　m_strDatamember ＝ 
new char[m_iDataSize+1]; 　　strcpy(m_strDatamember，strData); 　　} 　　CMyData& 
CMyData::operator ＝(CMyData &SrcData) 　　{ 　　m_iIndex ＝ SrcData.m_iIndex; 
　　m_iDataSize ＝ SrcData.GetDataSize(); 　　m_strDatamember ＝ new 
char[m_iDataSize+1]; 　　strcpy(m_strDatamember，SrcData.GetData()); 　　return 
＊this; 　　} 　　bool CMyData::operator ＜(CMyData& data ) 　　{ 　　return 
m_iIndex＜data.m_iIndex; 　　} 　　bool CMyData::operator ＞(CMyData& data ) 　　{ 
　　return m_iIndex＞data.m_iIndex; 　　} 
　　/////////////////////////////////////////////////////////// 
　　////////////////////////////////////////////////////////// 　　//主程序部分 
　　#include ＜iostream.h＞ 　　#include ＂MyData.h＂ 　　template ＜class T＞ 　　void run(T＊ 
pData，int left，int right) 　　{ 　　int i，j; 　　T middle，iTemp; 　　i ＝ left; 　　j ＝ 
right; 　　//下面的比较都调用我们重载的操作符函数 　　middle ＝ pData[(left+right)/2]; //求中间值 　　do{ 
　　while((pData＜middle) && (i＜right))//从左扫描大于中值的数 　　i++;　 
　　while((pData[j]＞middle) && (j＞left))//从右扫描大于中值的数 　　j--; 　　if(i＜＝j)//找到了一对值 　　{ 
　　//交换 　　iTemp ＝ pData; 　　pData ＝ pData[j]; 　　pData[j] ＝ iTemp; 　　i++; 　　j--; 
　　} 　　}while(i＜＝j);//如果两边扫描的下标交错，就停止（完成一次） 　　//当左边部分有值(left＜j)，递归左半边 
　　if(left＜j) 　　run(pData，left，j); 　　//当右边部分有值(right＞i)，递归右半边 　　if(right＞i) 
　　run(pData，i，right); 　　} 　　template ＜class T＞ 　　void QuickSort(T＊ pData，int 
Count) 　　{ 　　run(pData，0，Count-1); 　　} 　　void main() 　　{ 　　CMyData data[] ＝ { 
　　CMyData(8，＂xulion＂)， 　　CMyData(7，＂sanzoo＂)， 　　CMyData(6，＂wangjun＂)， 
　　CMyData(5，＂VCKBASE＂)， 　　CMyData(4，＂jacky2000＂)， 　　CMyData(3，＂cwally＂)， 
　　CMyData(2，＂VCUSER＂)， 　　CMyData(1，＂isdong＂) 　　}; 　　QuickSort(data，8); 　　for 
(int i＝0;i＜8;i++) 　　cout＜＜data.m_iIndex＜＜＂ ＂＜＜data.GetData()＜＜＂＼n＂; 
　　cout＜＜＂＼n＂;
  